{"version":3,"file":"static/js/186.2e44b88c.chunk.js","mappings":"kOAKMA,EAAc,CAClBC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,WA0CT,UAvCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CACA,IAAMK,EAAgB,mCAAG,8GAEAC,EAAAA,EAAAA,IAAeN,GAFf,OAEfO,EAFe,OAGrBR,EAAWQ,EAAOC,SAHG,gDAKrBL,EAAS,KAAMM,SALM,yDAAH,qDAQtBJ,GATmB,CAUpB,GAAE,CAACL,KAEJI,EAAAA,EAAAA,YAAU,WACRM,EAAAA,GAAAA,MAAYR,EAAOf,EACpB,GAAE,CAACe,KAGF,2BACsB,IAAnBJ,EAAQa,SAAgB,uBAAG,8CAC5B,wBACGb,EAAQc,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,2BACE,0BAAI,WAASF,MACb,uBAAIC,MAFGC,EAKZ,QAIR,C,+LCnDKC,EAAM,+BACNC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sDAC+BC,IAFvB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOjBC,EAAa,mCAAG,WAAMC,GAAN,uFACJJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,+BACQO,EADR,uDAC4DN,EAD5D,YADI,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,sDAObG,EAAS,mCAAG,WAAMT,GAAN,uFACAI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLD,EADK,mCACwBE,IAFxB,cACjBG,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTI,EAAY,mCAAG,WAAMV,GAAN,uFACHI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLD,EADK,2CACgCE,IAF7B,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZf,EAAc,mCAAG,WAAMS,GAAN,uFACLI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLD,EADK,2CACgCE,IAF3B,cACtBG,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getFilmReviews } from 'services/api';\n\nconst toastConfig = {\n  position: 'top-right',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'colored',\n};\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { filmId } = useParams();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!filmId) return;\n    const fetchFilmReviews = async () => {\n      try {\n        const review = await getFilmReviews(filmId);\n        setReviews(review.results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchFilmReviews();\n  }, [filmId]);\n\n  useEffect(() => {\n    toast.error(error, toastConfig);\n  }, [error]);\n\n  return (\n    <div>\n      {reviews.length === 0 && <p>We don't have any reviews for this movie</p>}\n      <ul>\n        {reviews.map(({ author, content, id }) => {\n          return (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9768baa5071faaf4c13ac6e91d2a589d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${URL}/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getFilmSearch = async query => {\n  const response = await axios.get(\n    `${URL}/search/movie?query=${query}&include_adult=false&language=en-US&api_key=${API_KEY}&page=1`\n  );\n  return response.data;\n};\n\nexport const getFilmId = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getFilmsCast = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}/credits?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getFilmReviews = async id => {\n  const response = await axios.get(\n    `${URL}/movie/${id}/reviews?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["toastConfig","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","useState","reviews","setReviews","filmId","useParams","error","setError","useEffect","fetchFilmReviews","getFilmReviews","review","results","message","toast","length","map","author","content","id","URL","API_KEY","getTrendingMovies","axios","response","data","getFilmSearch","query","getFilmId","getFilmsCast"],"sourceRoot":""}